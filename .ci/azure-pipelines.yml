trigger:
  batch: true
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

pr:
  branches:
    include:
    - '*'

jobs:
  - job: Build
    displayName: 'Build'

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: NodeTool@0
      displayName: 'Install Node'
      inputs:
        versionSpec: '12.x'

    - task: Cache@2
      displayName: 'Check Cache'
      inputs:
        key: 'package-lock.json'
        path: 'node_modules'
        cacheHitVar: CACHE_RESTORED

    - script: 'npm ci --no-audit'
      displayName: 'Install Dependencies'
      condition: ne(variables.CACHE_RESTORED, 'true')

    - script: 'npm run build'
      displayName: 'Build'

    - script: 'npm run test'
      displayName: 'Check Build'

    - script: 'npm pack'
      displayName: 'Bundle Release'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Release'
      inputs:
        targetPath: '$(Build.SourcesDirectory)/jellyfin-apiclient*'
        artifactName: 'jellyfin-apiclient-javascript'

  - job: Lint
    displayName: 'Lint'

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: NodeTool@0
      displayName: 'Install Node'
      inputs:
        versionSpec: '12.x'

    - task: Cache@2
      displayName: 'Check Cache'
      inputs:
        key: 'package-lock.json'
        path: 'node_modules'
        cacheHitVar: CACHE_RESTORED

    - script: 'npm ci --no-audit'
      displayName: 'Install Dependencies'
      condition: ne(variables.CACHE_RESTORED, 'true')

    - script: 'npm run lint'
      displayName: 'Run ESLint'

  - job: Test
    displayName: 'Test'

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: NodeTool@0
      displayName: 'Install Node'
      inputs:
        versionSpec: '12.x'

    - task: Cache@2
      displayName: 'Check Cache'
      inputs:
        key: 'package-lock.json'
        path: 'node_modules'
        cacheHitVar: CACHE_RESTORED

    - script: 'npm ci --no-audit'
      displayName: 'Install Dependencies'
      condition: ne(variables.CACHE_RESTORED, 'true')

    - script: 'npm run jest --ci --reporters=default --reporters=jest-junit --coverage'
      displayName: 'Run Jest'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testRunner: JUnit
        testResultsFiles: 'junit.xml'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Coverage Results'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/coverage'
